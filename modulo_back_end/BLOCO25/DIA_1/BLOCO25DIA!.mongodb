{ //  Para Fixar $limit e $match 
  // use ("agg_example");
  // db.transactions.insertMany([
  //   { value: 5900, from: "Dave America", to: "Ned Flanders", bank: 'International' },
  //   { value: 1000, from: "Mark Zuck", to: "Edna Krabappel", bank: 'FloridaBank' },
  //   { value: 209, from: "Lisa Simpson", to: "Dave America", bank: 'bankOfAmerica' },
  //   { value: 10800, from: "Arnold Schuz", to: "Mark Zuck", bank: 'JPMorgan' },
  //   { value: 850, from: "Barney Gumble", to: "Lisa Simpson", bank: 'Citigroup' },
  //   { value: 76000, from: "Ned Flanders", to: "Edna Krabappel", bank: 'JPMorgan' },
  //   { value: 1280, from: "Dave America", to: "Homer Simpson", bank: 'Citigroup' },
  //   { value: 7000, from: "Arnold Schuz", to: "Ned Flanders", bank: 'International' },
  //   { value: 59020, from: "Homer Simpson", to: "Lisa Simpson", bank: 'International' },
  //   { value: 100, from: "Mark Zuck", to: "Barney Gumble", bank: 'FloridaBank' },
  // ]);


  //1.Selecione todas as transações feitas pelo cliente chamado "Dave America".
  // use ("agg_example");
  // db.transactions.aggregate(
  // [
  //   {
  //     $match: 
  //     { 
  //       from: "Dave America" 
  //     },

  //   },
  // ]
  // );

  //2. Selecione todas as transações com o valor entre 700 e 6000, ou que sejam recebidas pela cliente "Lisa Simpson".
  // use ("agg_example");
  // db.transactions.aggregate(
  //   [
  //     {
  //       $match: {
  //         $or: [
  //           { value: { $gt: 700, $lt: 6000 }},
  //           { to: "Lisa Simpson" },
  //         ]
  //       }
  //     },
  //   ]
  // );

  //3. Selecione três transações com o valor acima de 1000.
  // use ("agg_example");
  // db.transactions.aggregate([
  //   {
  //     $match: {
  //       value: { $gt: 1000 },
  //     },
  //   },{
  //     $limit: 3,
  //   },
  // ]);
}
  
{  // Exemplos $group

   use ("agg_example");
   db.sales.insertMany([
  {
  _id: 1,
  item: "Código Limpo",
  price: NumberDecimal("10"),
  quantity: NumberInt("2"),
  date: ISODate("2014-03-01T08:00:00Z")
  },
  {
  _id: 2,
  item: "O Homem e Seus Símbolos",
  price: NumberDecimal("20"),
  quantity: NumberInt("1"),
  date: ISODate("2014-03-01T09:00:00Z")
  },
  {
  _id: 3,
  item: "Comunicação Não-Violenta",
  price: NumberDecimal("5"),
  quantity: NumberInt( "10"),
  date: ISODate("2014-03-15T09:00:00Z")
  },
  {
  _id: 4,
  item: "Comunicação Não-Violenta",
  price: NumberDecimal("5"),
  quantity:  NumberInt("20"),
  date: ISODate("2014-04-04T11:21:39.736Z")
  },
  {
  _id: 5,
  item: "Código Limpo",
  price: NumberDecimal("10"),
  quantity: NumberInt("10"),
  date: ISODate("2014-04-04T21:23:13.331Z")
  },
  {
  _id: 6,
  item:"A Coragem de Ser Imperfeito",
  price: NumberDecimal("7.5"),
  quantity: NumberInt("5" ),
  date: ISODate("2015-06-04T05:08:13Z")
  },
  {
  _id: 7,
  item: "A Coragem de Ser Imperfeito",
  price: NumberDecimal("7.5"),
  quantity: NumberInt("10"),
  date: ISODate("2015-09-10T08:43:00Z")
  },
  {
  _id: 8,
  item: "Código Limpo",
  price: NumberDecimal("10"),
  quantity: NumberInt("5" ),
  date: ISODate("2016-02-06T20:20:13Z")
  }
  ]);
  
  // Exemplo 1: Contando o número de documentos
  // Você pode utilizar o operador $group para contar o número de documentos da coleção sales :

  use ("agg_example");
  db.sales.aggregate([
  {
    $group: {
      _id: null,
      count: { $sum: 1 }
    }
  }
  ]);

  // Exemplo 2: Retornando valores distintos
  // O operador $group também pode ser utilizado para encontrar os valores distintos de um campo. Por exemplo, se quiser saber todos os valores únicos do campo item e quantos são, faça como o exemplo seguinte:
  
  use ("agg_example")
  db.sales.aggregate([
  {
    $group : {
      _id : "$item",
      count: { $sum: 1}
    }
  }
  ]);


  // Exemplo 3: Somando valores
  // Para saber o valor das vendas, você deve utilizar o operador $sum , que, por sua vez, aceita mais modificadores. No exemplo que se segue, multiplica-se o valor do campo price pelo valor do campo quantity :

  use ("agg_example");
  db.sales.aggregate([
  {
    $group : {
      _id : "$item",
      totalSaleAmount: {
    $sum: {
    $multiply: ["$price", "$quantity"]
        }
      }
    }
  }
  ]);

  // Exemplo 4: Having (do Mysql), combinando estágios no aggregate
  //Também é possível realizar operações equivalentes ao HAVING do SQL , que nada mais é que um filtro depois de um agrupamento. Por exemplo, se você quiser manter o agrupamento anterior, mas saber apenas as vendas que possuem valores maiores do que 100 , é só adicionar mais um estágio no pipeline :

  use ("agg_example");
  db.sales.aggregate([
  // Primeiro Estágio
  {
    $group: {
      _id : "$item",
      totalSaleAmount: {
        $sum: {
          $multiply: ["$price", "$quantity"]
        }
      }
    }
  },
  // Segundo Estágio
  {
    $match: { "totalSaleAmount": { $gte: 100 } }
  }
 ]);

  //   Exemplo 5: Agrupando por null
  //   Você pode executar operações matemáticas em todos os documentos de uma coleção. Basta passar null no _id e seguir com os operadores de acumulação.
  //  No exemplo a seguir, a operação de agregação retornará um documento com o valor total da venda, a quantidade média de itens vendidos e o total de vendas:
  
  use ("agg_example");
  db.sales.aggregate([
  {
  $group : {
      _id : null,
      totalSaleAmount: {
  $sum: { $multiply: ["$price", "$quantity"] }
      },
      averageQuantity: { $avg: "$quantity" },
      count: { $sum: 1 }
    }
  }
 ]);
  
 // Para fixar
 // 1. Selecione todos os bancos, ou seja, valores do campo bank ;
  
  use ("agg_example");
  db.transactions.aggregate(
    [
      {
        $group: {
          _id: "$bank",
          bank: { $sum: 1 }
        }
      }
    ]);

 //2. Selecione o valor total das transações em cada banco e quantas são;
  use ("agg_example");
  db.transactions.aggregate(
    [
      {
        $group: {
          _id: "$bank",
          total: { $sum: "$value" },
          transações: { $sum: 1 },
        },
      },
    ]);

 //3. Selecione o valor total de transações por banco;
  use ("agg_example");
  db.transactions.aggregate(
    [
      {
        $group: {
          _id: "$bank",
          total: { $sum: "$value" },
        },
      },
    ]);

 //4. Selecione os bancos que têm o valor total de transações maior que 1000.
  use ("agg_example");
  db.transactions.aggregate(
    [
      {
        $group: {
          _id: "$bank",
          total: { $sum: "$value" },
        },
      },
      {
        $match: { "total": { $gt: 1000 } }
      }
    ]);


}

{ // Exemplo $unwind
 use ("agg_example");
 db.inventory.insertOne({ _id: 7, item: "ABC1", sizes: ["S", "M", "L"] });

 use ("agg_example");
 db.inventory.aggregate([{ $unwind : "$sizes" }]);
}

{ // $lookup
  // orders
  use ("agg-example");
  db.orders.insertMany([
  { _id: 1, item: "almonds", price: 12, quantity: 2 },
  { _id: 2, item: "pecans", price: 20, quantity: 1 },
  { _id: 3 }
  ]);

  use ("agg-example");
  // inventory
  db.inventory.insertMany([
  { _id: 1, sku: "almonds", description: "product 1", instock: 120 },
  { _id: 2, sku: "bread", description: "product 2", instock: 80 },
  { _id: 3, sku: "cashews", description: "product 3", instock: 60 },
  { _id: 4, sku: "pecans", description: "product 4", instock: 70 },
  { _id: 5, sku: null, description: "Incomplete" },
  { _id: 6 }
  ]);
  
  use ("agg-example");
  db.orders.aggregate([
  {
  $lookup: {
      from: "inventory",
      localField: "item",
      foreignField: "sku",
      as: "inventory_docs"
    }
  }
 ]);

 // Para Fixar
  use ("agg_example");
  db.clients.insertMany([
  { name: "Dave America", State: "Florida" },
  { name: "Ned Flanders", State: "Alasca" },
  { name: "Mark Zuck", State: "Texas" },
  { name: "Edna Krabappel", State: "Montana" },
  { name: "Arnold Schuz", State: "California" },
  { name: "Lisa Simpson", State: "Florida" },
  { name: "Barney Gumble", State: "Texas" },
  { name: "Homer Simpson", State: "Florida" },
  ]);

 //1. Selecione todos os clientes com as suas respectivas transações feitas;

  use ("agg_example");
  db.clients.aggregate([
  {
    $lookup: {
      from: "transactions",
      localField: "name",
      foreignField: "from",
      as: "transactions_history"
    },
  },
 ]);

 //2. Selecione quatro clientes com as suas respectivas transações recebidas;

  use ("agg_example");
  db.clients.aggregate([
  {
    $lookup: {
      from: "transactions",
      localField: "name",
      foreignField: "to",
      as: "transactions_history"
    },
  },
  {
    $limit: 4,
  },
 ]);

 //3. Selecione todos os cliente do estado da "Florida" e suas respectivas transações recebidas.

  use ("agg_example");
  db.clients.aggregate([
  {
    $match: { State: 'Florida' },
  },
  {
    $lookup: {
      from: "transactions",
      localField: "name",
      foreignField: "to",
      as: "transactions_history"
    },
  },
 ]);

 }