{"ast":null,"code":"var _jsxFileName = \"/home/alex/projetos/exercicios-trybe/modulo_front-end/dia_1/fancy-buttons/src/App.js\";\n// import React from 'react';\n// import './App.css';\n// /* Embora isso funcione, essa DEFINITIVAMENTE\n// não é a maneira correta de se criar eventos\n// em React! A função se refere ao componente,\n// então deve ser parte de sua classe! */\n// function handleClick1() {\n//   console.log('Clicou no botão!')\n// }\n// function handleClick2() {\n//   console.log('Parabéns Você ganhou $1000000,00')\n// }\n// function handleClick3() {\n//   console.log('Parabéns acaba de ganhar uma Viajem para o Monte Everesr')\n// }\n// class App extends React.Component {\n//   /* Repare que, diferentemente do HTML, no\n//   JSX você associa uma função a um evento\n//   passando a própria função entre chaves `{}` */\n//   render() {\n//     return (\n//     <div>\n//       <button onClick={handleClick1}>Meu botão</button>\n//       <button onClick={handleClick2}>Clique e Veja Seu Prêmio</button>\n//       <button onClick={handleClick3}>Clique e Ganhe uma Viajem</button>\n//     </div>\n//   )\n//   }\n// }\n// export default App;\n////////////////////////////////Acessando uma função nossa dentro da classe//////////////////////////////////////////////////\n// import React from 'react';\n// import './App.css';\n// class App extends React.Component {\n//   handleClick() {\n//     console.log('Clicou!')\n//   }\n//   render() {\n//     /* No React, precisamos dizer explicitamente que queremos uma função da nossa classe\n//     através da sintaxe `this.minhaFuncao` para usá-la num evento */\n//     return <button type=\"button\" onClick={this.handleClick}>Meu botão</button>;\n//   }\n// }\n// export default App;\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////Constructor////////////////////////////////////////////////////////////////\n// import React from 'react';\n// import './App.css';\n// class App extends React.Component {\n//   constructor(props) {\n//     // A função `super()` é chamada para garantir que a lógica interna do React rode **antes** da sua. Se não for assim, o código não funcionará\n//     super()\n//     // Sua lógica extra vai aqui! O parâmetro `props` é opcional, para você acessar as props diretamente no construtor\n//   }\n//   render() {\n//     return <span>Meu componente!</span>\n//   }\n// }\n// export default App;\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////this////////////////////////////////////////////////////////////////////////\n// import React from 'react';\n// import './App.css';\n// class App extends React.Component {\n//   render() {\n//     console.log(this)\n//     return <span>Hello, world!</span>\n//   }\n// }\n// export default App;\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// import React from 'react';\n// import './App.css';\n// class App extends React.Component {\n//   handleClick() {\n//     // Essa chamada ao `this` retorna `undefined`? !\n//     console.log(this)\n//     console.log('Clicou')\n//   }\n//   render() {\n//     // Já essa chamada ao `this`, feita de dentro da função `render`, retorna o objeto que esperamos\n//     console.log(this)\n//     return <button onClick={this.handleClick}>Meu botão</button>\n//   }\n// }\n// export default App;\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// import React from 'react';\n// import './App.css';\n// class App extends React.Component {\n//   constructor() {\n//     super()\n//     // A função abaixo vincula \"manualmente\" o `this` à nossa função\n//     this.handleClick = this.handleClick.bind(this)\n//   }\n//   handleClick() {\n//     /* Agora esse log retorna o objeto `this`, já acessível para nossa função!\n//     Com isso, podemos acessar as `props`, estado do componente (ainda vamos ver como!)\n//     e tudo o mais daqui de dentro */\n//     console.log(this)\n//     console.log('Clicou!')\n//   }\n//   render() {\n//     return <button onClick={this.handleClick}>Meu botão</button>\n//   }\n// }\n// export default App;\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\nimport React from 'react';\nimport './App.css';\n/* Embora isso funcione, essa DEFINITIVAMENTE\nnão é a maneira correta de se criar eventos\nem React! A função se refere ao componente,\nentão deve ser parte de sua classe! */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction handleClick1() {\n  console.log('Clicou no botão!');\n}\n\nfunction handleClick2() {\n  console.log('Parabéns Você ganhou $1000000,00');\n}\n\nfunction handleClick3() {\n  console.log('Parabéns acaba de ganhar uma Viajem para o Monte Everesr');\n}\n\nclass App extends React.Component {\n  /* Repare que, diferentemente do HTML, no\n  JSX você associa uma função a um evento\n  passando a própria função entre chaves `{}` */\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleClick1,\n        children: \"Meu bot\\xE3o\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleClick2,\n        children: \"Clique e Veja Seu Pr\\xEAmio\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleClick3,\n        children: \"Clique e Ganhe uma Viajem\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 5\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/alex/projetos/exercicios-trybe/modulo_front-end/dia_1/fancy-buttons/src/App.js"],"names":["React","handleClick1","console","log","handleClick2","handleClick3","App","Component","render"],"mappingskB,OAAlB;AACA,OAAO,WAAP;AAEA;AACA;AACA;AACA;;;;AACA,SAASC,YAAT,GAAwB;AACtBC,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACD;;AAED,SAASC,YAAT,GAAwB;AACtBF,EAAAA,OAAO,CAACC,GAAR,CAAY,kCAAZ;AACD;;AAED,SAASE,YAAT,GAAwB;AACtBH,EAAAA,OAAO,CAACC,GAAR,CAAY,0DAAZ;AACD;;AAED,MAAMG,GAAN,SAAkBN,KAAK,CAACO,SAAxB,CAAkC;AAChC;AACF;AACA;AAcEC,EAAAA,MAAM,GAAG;AACP,wBACA;AAAA,8BACE;AAAQ,QAAA,OAAO,EAAEP,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAQ,QAAA,OAAO,EAAEG,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAQ,QAAA,OAAO,EAAEC,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YADA;AAOD;;AAzB+B;;AA4BlC,eAAeC,GAAf","sourcesContent":["// import React from 'react';\n// import './App.css';\n\n// /* Embora isso funcione, essa DEFINITIVAMENTE\n// não é a maneira correta de se criar eventos\n// em React! A função se refere ao componente,\n// então deve ser parte de sua classe! */\n// function handleClick1() {\n//   console.log('Clicou no botão!')\n// }\n\n// function handleClick2() {\n//   console.log('Parabéns Você ganhou $1000000,00')\n// }\n\n// function handleClick3() {\n//   console.log('Parabéns acaba de ganhar uma Viajem para o Monte Everesr')\n// }\n\n// class App extends React.Component {\n//   /* Repare que, diferentemente do HTML, no\n//   JSX você associa uma função a um evento\n//   passando a própria função entre chaves `{}` */\n//   render() {\n//     return (\n//     <div>\n//       <button onClick={handleClick1}>Meu botão</button>\n//       <button onClick={handleClick2}>Clique e Veja Seu Prêmio</button>\n//       <button onClick={handleClick3}>Clique e Ganhe uma Viajem</button>\n//     </div>\n//   )\n//   }\n// }\n\n// export default App;\n\n////////////////////////////////Acessando uma função nossa dentro da classe//////////////////////////////////////////////////\n// import React from 'react';\n// import './App.css';\n\n// class App extends React.Component {\n//   handleClick() {\n//     console.log('Clicou!')\n//   }\n\n//   render() {\n//     /* No React, precisamos dizer explicitamente que queremos uma função da nossa classe\n//     através da sintaxe `this.minhaFuncao` para usá-la num evento */\n//     return <button type=\"button\" onClick={this.handleClick}>Meu botão</button>;\n//   }\n// }\n\n// export default App;\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////Constructor////////////////////////////////////////////////////////////////\n\n// import React from 'react';\n// import './App.css';\n\n// class App extends React.Component {\n//   constructor(props) {\n//     // A função `super()` é chamada para garantir que a lógica interna do React rode **antes** da sua. Se não for assim, o código não funcionará\n//     super()\n\n//     // Sua lógica extra vai aqui! O parâmetro `props` é opcional, para você acessar as props diretamente no construtor\n//   }\n\n//   render() {\n//     return <span>Meu componente!</span>\n//   }\n// }\n\n// export default App;\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n/////////////////////////////////////////////////this////////////////////////////////////////////////////////////////////////\n\n// import React from 'react';\n// import './App.css';\n\n// class App extends React.Component {\n//   render() {\n//     console.log(this)\n//     return <span>Hello, world!</span>\n//   }\n// }\n\n// export default App;\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// import React from 'react';\n// import './App.css';\n\n// class App extends React.Component {\n//   handleClick() {\n//     // Essa chamada ao `this` retorna `undefined`? !\n//     console.log(this)\n//     console.log('Clicou')\n//   }\n\n//   render() {\n//     // Já essa chamada ao `this`, feita de dentro da função `render`, retorna o objeto que esperamos\n//     console.log(this)\n//     return <button onClick={this.handleClick}>Meu botão</button>\n//   }\n// }\n\n// export default App;\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n// import React from 'react';\n// import './App.css';\n\n// class App extends React.Component {\n//   constructor() {\n//     super()\n//     // A função abaixo vincula \"manualmente\" o `this` à nossa função\n//     this.handleClick = this.handleClick.bind(this)\n//   }\n\n//   handleClick() {\n//     /* Agora esse log retorna o objeto `this`, já acessível para nossa função!\n//     Com isso, podemos acessar as `props`, estado do componente (ainda vamos ver como!)\n//     e tudo o mais daqui de dentro */\n//     console.log(this)\n//     console.log('Clicou!')\n//   }\n\n//   render() {\n//     return <button onClick={this.handleClick}>Meu botão</button>\n//   }\n// }\n\n// export default App;\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nimport React from 'react';\nimport './App.css';\n\n/* Embora isso funcione, essa DEFINITIVAMENTE\nnão é a maneira correta de se criar eventos\nem React! A função se refere ao componente,\nentão deve ser parte de sua classe! */\nfunction handleClick1() {\n  console.log('Clicou no botão!')\n}\n\nfunction handleClick2() {\n  console.log('Parabéns Você ganhou $1000000,00')\n}\n\nfunction handleClick3() {\n  console.log('Parabéns acaba de ganhar uma Viajem para o Monte Everesr')\n}\n\nclass App extends React.Component {\n  /* Repare que, diferentemente do HTML, no\n  JSX você associa uma função a um evento\n  passando a própria função entre chaves `{}` */\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  render() {\n    return (\n    <div>\n      <button onClick={handleClick1}>Meu botão</button>\n      <button onClick={handleClick2}>Clique e Veja Seu Prêmio</button>\n      <button onClick={handleClick3}>Clique e Ganhe uma Viajem</button>\n    </div>\n  )\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}