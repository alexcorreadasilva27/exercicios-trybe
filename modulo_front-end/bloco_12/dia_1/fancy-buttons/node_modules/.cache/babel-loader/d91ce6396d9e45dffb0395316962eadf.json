{"ast":null,"code":"var _jsxFileName = \"/home/alex/projetos/exercicios-trybe/modulo_front-end/dia_1/fancy-buttons/src/App.js\";\n// import React from 'react';\n// import './App.css';\n// /* Embora isso funcione, essa DEFINITIVAMENTE\n// não é a maneira correta de se criar eventos\n// em React! A função se refere ao componente,\n// então deve ser parte de sua classe! */\n// function handleClick1() {\n//   console.log('Clicou no botão!')\n// }\n// function handleClick2() {\n//   console.log('Parabéns Você ganhou $1000000,00')\n// }\n// function handleClick3() {\n//   console.log('Parabéns acaba de ganhar uma Viajem para o Monte Everesr')\n// }\n// class App extends React.Component {\n//   /* Repare que, diferentemente do HTML, no\n//   JSX você associa uma função a um evento\n//   passando a própria função entre chaves `{}` */\n//   render() {\n//     return (\n//     <div>\n//       <button onClick={handleClick1}>Meu botão</button>\n//       <button onClick={handleClick2}>Clique e Veja Seu Prêmio</button>\n//       <button onClick={handleClick3}>Clique e Ganhe uma Viajem</button>\n//     </div>\n//   )\n//   }\n// }\n// export default App;\n////////////////////////////////Acessando uma função nossa dentro da classe//////////////////////////////////////////////////\n// import React from 'react';\n// import './App.css';\n// class App extends React.Component {\n//   handleClick() {\n//     console.log('Clicou!')\n//   }\n//   render() {\n//     /* No React, precisamos dizer explicitamente que queremos uma função da nossa classe\n//     através da sintaxe `this.minhaFuncao` para usá-la num evento */\n//     return <button type=\"button\" onClick={this.handleClick}>Meu botão</button>;\n//   }\n// }\n// export default App;\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//////////////////////////////////////////////////Constructor////////////////////////////////////////////////////////////////\n// import React from 'react';\n// import './App.css';\n// class App extends React.Component {\n//   constructor(props) {\n//     // A função `super()` é chamada para garantir que a lógica interna do React rode **antes** da sua. Se não for assim, o código não funcionará\n//     super()\n//     // Sua lógica extra vai aqui! O parâmetro `props` é opcional, para você acessar as props diretamente no construtor\n//   }\n//   render() {\n//     return <span>Meu componente!</span>\n//   }\n// }\n// export default App;\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////this////////////////////////////////////////////////////////////////////////\n// import React from 'react';\n// import './App.css';\n// class App extends React.Component {\n//   render() {\n//     console.log(this)\n//     return <span>Hello, world!</span>\n//   }\n// }\n// export default App;\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// import React from 'react';\n// import './App.css';\n// class App extends React.Component {\n//   handleClick() {\n//     // Essa chamada ao `this` retorna `undefined`? !\n//     console.log(this)\n//     console.log('Clicou')\n//   }\n//   render() {\n//     // Já essa chamada ao `this`, feita de dentro da função `render`, retorna o objeto que esperamos\n//     console.log(this)\n//     return <button onClick={this.handleClick}>Meu botão</button>\n//   }\n// }\n// export default App;\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// import React from 'react';\n// import './App.css';\n// class App extends React.Component {\n//   constructor() {\n//     super()\n//     // A função abaixo vincula \"manualmente\" o `this` à nossa função\n//     this.handleClick = this.handleClick.bind(this)\n//   }\n//   handleClick() {\n//     /* Agora esse log retorna o objeto `this`, já acessível para nossa função!\n//     Com isso, podemos acessar as `props`, estado do componente (ainda vamos ver como!)\n//     e tudo o mais daqui de dentro */\n//     console.log(this)\n//     console.log('Clicou!')\n//   }\n//   render() {\n//     return <button onClick={this.handleClick}>Meu botão</button>\n//   }\n// }\n// export default App;\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// import React from 'react';\n// import './App.css';\n// /* Embora isso funcione, essa DEFINITIVAMENTE\n// não é a maneira correta de se criar eventos\n// em React! A função se refere ao componente,\n// então deve ser parte de sua classe! */\n// class App extends React.Component {\n//   constructor() {\n//     super();\n//     this.handleClick1 = this.handleClick1.bind(this);\n//     this.handleClick2 = this.handleClick2.bind(this);\n//     this.handleClick3 = this.handleClick3.bind(this);\n//   }\n//   handleClick1() {\n//     console.log('\"this\" Clicou no botão!', this);\n//   }\n//   handleClick2() {\n//     console.log('\"this\" Parabéns Você ganhou $1000000,00', this)\n//   }\n//   handleClick3() {\n//     console.log('\"this\" Parabéns acaba de ganhar uma Viajem para o Monte Everest', this)\n//   }\n//   render() {\n//     return (\n//     <div>\n//       <button onClick={ this.handleClick1 }>Meu botão</button>\n//       <button onClick={ this.handleClick2 }>Clique e Veja Seu Prêmio</button>\n//       <button onClick={ this.handleClick3 }>Clique e Ganhe uma Viajem</button>\n//     </div>\n//   )\n//   }\n// }\n// export default App;\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// import React from 'react';\n// import './App.css';\n// class App extends React.Component {\n//   constructor() {\n//     super()\n//     /* Para definir um estado inicial ao componente, a ser definido\n//     no momento em que o componente for colocado na tela, faça uma atribuição\n//     de um objeto à chave `state` do `this`, ou seja, ao `this.state`*/\n//     this.state = {\n//       numeroDeCliques: 0\n//     }\n//     this.handleClick = this.handleClick.bind(this);\n//   }\n//   handleClick = () => {\n//     /* Você **NUNCA** deve fazer atribuições diretamente a `this.state`. Deve,\n//     ao invés disso, SEMPRE utilizar a função `this.setState(novoEstado)` do\n//     React*/\n//     this.setState({\n//       numeroDeCliques: 1\n//     })\n//   }\n//   render() {\n//     /*Para LER o estado, você pode usar `this.state.chaveDoMeuEstado`*/\n//     return <button onClick={this.handleClick}>{this.state.numeroDeCliques}</button>\n//   }\n// }\n// export default App;\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\nimport React from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.handleClick = () => {\n      /* Passando uma callback à função setState, que recebe de parâmetros\n      o estado anterior e as props do componente, você garante que as atualizações\n      do estado acontecerão uma depois da outra! */\n      this.setState((estadoAnterior, _props) => ({\n        numeroDeCliques: estadoAnterior.numeroDeCliques + 1\n      }));\n    };\n\n    this.state = {\n      numeroDeCliques: 0\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => this.handleClick,\n      children: this.state.numeroDeCliques\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 12\n    }, this);\n  }\n\n}\n\nexport default App; /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////","map":{"version":3,"sources":["/home/alex/projetos/exercicios-trybe/modulo_front-end/dia_1/fancy-buttons/src/App.js"],"names":["React","App","Component","constructor","handleClick","setState","estadoAnterior","_props","numeroDeCliques","state","bind","render"],"mappingskB,OAAlB;AACA,OAAO,WAAP;;;AAEA,MAAMC,GAAN,SAAkBD,KAAK,CAACE,SAAxB,CAAkC;AAChCC,EAAAA,WAAW,GAAG;AACZ;;AADY,SAQdC,WARc,GAQA,MAAM;AAClB;AACJ;AACA;AACI,WAAKC,QAAL,CAAc,CAACC,cAAD,EAAiBC,MAAjB,MAA6B;AACzCC,QAAAA,eAAe,EAAEF,cAAc,CAACE,eAAf,GAAiC;AADT,OAA7B,CAAd;AAGD,KAfa;;AAEZ,SAAKC,KAAL,GAAa;AACXD,MAAAA,eAAe,EAAE;AADN,KAAb;AAGA,SAAKJ,WAAL,GAAmB,KAAKA,WAAL,CAAiBM,IAAjB,CAAsB,IAAtB,CAAnB;AACD;;AAWDC,EAAAA,MAAM,GAAG;AACP,wBAAO;AAAQ,MAAA,OAAO,EAAE,MAAM,KAAKP,WAA5B;AAAA,gBAA0C,KAAKK,KAAL,CAAWD;AAArD;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AApB+B;;AAuBlC,eAAeP,GAAf,C,CACA","sourcesContent":["// import React from 'react';\n// import './App.css';\n\n// /* Embora isso funcione, essa DEFINITIVAMENTE\n// não é a maneira correta de se criar eventos\n// em React! A função se refere ao componente,\n// então deve ser parte de sua classe! */\n// function handleClick1() {\n//   console.log('Clicou no botão!')\n// }\n\n// function handleClick2() {\n//   console.log('Parabéns Você ganhou $1000000,00')\n// }\n\n// function handleClick3() {\n//   console.log('Parabéns acaba de ganhar uma Viajem para o Monte Everesr')\n// }\n\n// class App extends React.Component {\n//   /* Repare que, diferentemente do HTML, no\n//   JSX você associa uma função a um evento\n//   passando a própria função entre chaves `{}` */\n//   render() {\n//     return (\n//     <div>\n//       <button onClick={handleClick1}>Meu botão</button>\n//       <button onClick={handleClick2}>Clique e Veja Seu Prêmio</button>\n//       <button onClick={handleClick3}>Clique e Ganhe uma Viajem</button>\n//     </div>\n//   )\n//   }\n// }\n\n// export default App;\n\n////////////////////////////////Acessando uma função nossa dentro da classe//////////////////////////////////////////////////\n// import React from 'react';\n// import './App.css';\n\n// class App extends React.Component {\n//   handleClick() {\n//     console.log('Clicou!')\n//   }\n\n//   render() {\n//     /* No React, precisamos dizer explicitamente que queremos uma função da nossa classe\n//     através da sintaxe `this.minhaFuncao` para usá-la num evento */\n//     return <button type=\"button\" onClick={this.handleClick}>Meu botão</button>;\n//   }\n// }\n\n// export default App;\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n//////////////////////////////////////////////////Constructor////////////////////////////////////////////////////////////////\n\n// import React from 'react';\n// import './App.css';\n\n// class App extends React.Component {\n//   constructor(props) {\n//     // A função `super()` é chamada para garantir que a lógica interna do React rode **antes** da sua. Se não for assim, o código não funcionará\n//     super()\n\n//     // Sua lógica extra vai aqui! O parâmetro `props` é opcional, para você acessar as props diretamente no construtor\n//   }\n\n//   render() {\n//     return <span>Meu componente!</span>\n//   }\n// }\n\n// export default App;\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n/////////////////////////////////////////////////this////////////////////////////////////////////////////////////////////////\n\n// import React from 'react';\n// import './App.css';\n\n// class App extends React.Component {\n//   render() {\n//     console.log(this)\n//     return <span>Hello, world!</span>\n//   }\n// }\n\n// export default App;\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// import React from 'react';\n// import './App.css';\n\n// class App extends React.Component {\n//   handleClick() {\n//     // Essa chamada ao `this` retorna `undefined`? !\n//     console.log(this)\n//     console.log('Clicou')\n//   }\n\n//   render() {\n//     // Já essa chamada ao `this`, feita de dentro da função `render`, retorna o objeto que esperamos\n//     console.log(this)\n//     return <button onClick={this.handleClick}>Meu botão</button>\n//   }\n// }\n\n// export default App;\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n// import React from 'react';\n// import './App.css';\n\n// class App extends React.Component {\n//   constructor() {\n//     super()\n//     // A função abaixo vincula \"manualmente\" o `this` à nossa função\n//     this.handleClick = this.handleClick.bind(this)\n//   }\n\n//   handleClick() {\n//     /* Agora esse log retorna o objeto `this`, já acessível para nossa função!\n//     Com isso, podemos acessar as `props`, estado do componente (ainda vamos ver como!)\n//     e tudo o mais daqui de dentro */\n//     console.log(this)\n//     console.log('Clicou!')\n//   }\n\n//   render() {\n//     return <button onClick={this.handleClick}>Meu botão</button>\n//   }\n// }\n\n// export default App;\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n// import React from 'react';\n// import './App.css';\n\n// /* Embora isso funcione, essa DEFINITIVAMENTE\n// não é a maneira correta de se criar eventos\n// em React! A função se refere ao componente,\n// então deve ser parte de sua classe! */\n\n// class App extends React.Component {\n//   constructor() {\n//     super();\n//     this.handleClick1 = this.handleClick1.bind(this);\n//     this.handleClick2 = this.handleClick2.bind(this);\n//     this.handleClick3 = this.handleClick3.bind(this);\n//   }\n\n\n\n\n//   handleClick1() {\n//     console.log('\"this\" Clicou no botão!', this);\n//   }\n  \n//   handleClick2() {\n//     console.log('\"this\" Parabéns Você ganhou $1000000,00', this)\n//   }\n  \n//   handleClick3() {\n//     console.log('\"this\" Parabéns acaba de ganhar uma Viajem para o Monte Everest', this)\n//   }\n  \n//   render() {\n//     return (\n//     <div>\n//       <button onClick={ this.handleClick1 }>Meu botão</button>\n//       <button onClick={ this.handleClick2 }>Clique e Veja Seu Prêmio</button>\n//       <button onClick={ this.handleClick3 }>Clique e Ganhe uma Viajem</button>\n//     </div>\n//   )\n//   }\n// }\n\n// export default App;\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n// import React from 'react';\n// import './App.css';\n\n// class App extends React.Component {\n//   constructor() {\n//     super()\n//     /* Para definir um estado inicial ao componente, a ser definido\n//     no momento em que o componente for colocado na tela, faça uma atribuição\n//     de um objeto à chave `state` do `this`, ou seja, ao `this.state`*/\n//     this.state = {\n//       numeroDeCliques: 0\n//     }\n//     this.handleClick = this.handleClick.bind(this);\n//   }\n\n//   handleClick = () => {\n//     /* Você **NUNCA** deve fazer atribuições diretamente a `this.state`. Deve,\n//     ao invés disso, SEMPRE utilizar a função `this.setState(novoEstado)` do\n//     React*/\n//     this.setState({\n//       numeroDeCliques: 1\n//     })\n//   }\n\n//   render() {\n//     /*Para LER o estado, você pode usar `this.state.chaveDoMeuEstado`*/\n//     return <button onClick={this.handleClick}>{this.state.numeroDeCliques}</button>\n//   }\n// }\n\n// export default App;\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nimport React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      numeroDeCliques: 0\n    }\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick = () => {\n    /* Passando uma callback à função setState, que recebe de parâmetros\n    o estado anterior e as props do componente, você garante que as atualizações\n    do estado acontecerão uma depois da outra! */\n    this.setState((estadoAnterior, _props) => ({\n      numeroDeCliques: estadoAnterior.numeroDeCliques + 1\n    }))\n  }\n\n  render() {\n    return <button onClick={() => this.handleClick}>{this.state.numeroDeCliques}</button>\n  }\n}\n\nexport default App;\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n"]},"metadata":{},"sourceType":"module"}